---
- name: Initial setup for new host
  hosts: new
  gather_facts: yes

  vars_files:
    - /Users/martin/ansible/var_files/vars.yml

  pre_tasks:
    - name: Update cache archlinux
      become: yes
      ansible.builtin.pacman:
        update_cache: yes
      when: ansible_distribution == "Archlinux"

    - name: Update cache debian/ubuntu
      become: yes
      ansible.builtin.apt:
        update_cache: yes
      when: (ansible_distribution == "Debian" ) or (ansible_distribution == "Ubuntu")

    - name: create bin folder in root-home
      become: yes
      ansible.builtin.file:
        path: /root/bin
        state: directory

    - name: create .ssh folder in root-home
      become: yes
      ansible.builtin.file:
        path: /root/.ssh
        state: directory

  tasks:
    - name: install necessary packages archlinux
      become: yes
      ansible.builtin.pacman:
        state: latest
        name:
          - base-devel
          - cronie
          - qemu-guest-agent
          - git
          - vim
          - cifs-utils
          - rsnapshot
          - tmux
          - net-tools
          - dnsutils
          - sudo
          - bash-completion
          - reflector
          - pacman-contrib
          - zsh
      when: ansible_distribution == "Archlinux"

    - name: install necessary packages debian/ubuntu
      become: yes
      ansible.builtin.apt:
        state: latest
        name:
          - qemu-guest-agent
          - git
          - vim
          - rsnapshot
          - tmux
          - sudo
          - bash-completion
          - zsh
      when: (ansible_distribution == "Debian" ) or (ansible_distribution == "Ubuntu")
    
    - name: create user
      become: yes
      ansible.builtin.user:
        name: '{{ user }}'
        state: present
        shell: /bin/bash
        groups: '{{ admgroup }}'
        append: yes
        password: '{{ password }}'

    - name: create .ssh folder in user-home
      become: yes
      become_user: '{{ user }}'
      ansible.builtin.file:
        path: '/home/{{ user }}/.ssh'
        state: directory

    - name: create bin folder in user-home
      become: yes
      become_user: '{{ user }}'
      ansible.builtin.file:
        path: '/home/{{ user }}/bin'
        state: directory

    - name: "chsh for user"
      become: yes
      shell: chsh {{ user }} -s /bin/zsh

    - name: "chsh for root"
      become: yes
      shell: chsh -s /bin/zsh

    - name: check if dotfiles are installed.
      become: yes
      become_user: '{{ user }}'
      ansible.builtin.stat:
        path: '/home/{{ user }}/dotfiles/version.installed'
      register: dotfiles

    - name: notify dotfiles
      ansible.builtin.command: echo "dotfiles will be downloaded and installed"
      notify: dotfiles
      when: dotfiles.stat.exists == False

    - name: check if .oh-my-zsh installed.
      become: yes
      become_user: '{{ user }}'
      ansible.builtin.stat:
        path: '/home/{{ user }}/.oh-my-zsh'
      register: ohmyzsh

    - name: notify .oh-my-zsh
      ansible.builtin.command: echo ".oh-my-zsh will be downloaded and installed"
      notify: ohmyzsh
      when: ohmyzsh.stat.exists == False

    - name: check if dotfiles are installed for root.
      become: yes
      ansible.builtin.stat:
        path: /root/dotfiles/version.installed
      register: dotfilesroot

    - name: notify dotfiles for root
      ansible.builtin.command: echo "dotfiles will be downloaded and installed for root"
      notify: dotfilesroot
      when: dotfilesroot.stat.exists == False

    - name: check if .oh-my-zsh installed for root.
      become: yes
      ansible.builtin.stat:
        path: /root/.oh-my-zsh
      register: ohmyzshroot

    - name: notify .oh-my-zsh for root
      ansible.builtin.command: echo ".oh-my-zsh will be downloaded and installed for root"
      notify: ohmyzshroot
      when: ohmyzshroot.stat.exists == False

    - name: check if visudo file exists
      become: yes
      ansible.builtin.stat:
        path: /etc/sudoers.d/99_wheel
      register: visudo

    - name: notify visudo
      ansible.builtin.command: echo "visudo files will be installed"
      notify: visudo
      when: visudo.stat.exists == False

    - name: copy authorized_keys
      become: yes
      become_user: '{{ user }}'
      copy:
        src: ../files/authorized_keys
        dest: '/home/{{ user }}/.ssh'
        owner: '{{ user }}'
        group: '{{ group }}'
        mode: 0600

    - name: notify authorized_keys
      ansible.builtin.command: echo "authorized_keys will be installed"
      notify: copy authorized_keys
      when: auth_keys is changed

    - name: check if sshd_config is updated
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        line: "Port 20202"
        state: present
      check_mode: yes
      register: sshd_file

    - name: notify sshd_config
      ansible.builtin.command: echo "sshd_config will be installed"
      notify: copy sshd_config
      when: sshd_file is changed

    - name: check systemd-timesyncd is started
      become: yes
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: systemd-timesyncd

    - name: check cronie is started
      become: yes
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: cronie

    - name: check qemu-guest-agent is started
      become: yes
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: qemu-guest-agent

    - name: check reflector-timer is enabled
      become: yes
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: reflector.timer

    - name: full system upgrade archlinux
      become: yes
      ansible.builtin.pacman:
        upgrade: yes
      when: ansible_distribution == "Archlinux"

    - name: full system upgrade debian/ubuntu
      become: yes
      ansible.builtin.apt:
        upgrade: dist
      when: (ansible_distribution == "Debian" ) or (ansible_distribution == "Ubuntu")

    - name: check if reboot required
      become: yes
      ansible.builtin.script:
        cmd: '{{ ansible_path }}/scripts/check_reboot_required'
      when: ansible_distribution == "Archlinux"

    - name: register reboot
      become: yes
      ansible.builtin.stat:
        path: /var/run/reboot_required
      notify: reboot when required

  handlers:
    - name: restart sshd
      become: yes
      service:
        name: sshd
        state: restarted

    - name: reboot when required
      become: yes
      ansible.builtin.reboot:

    - name: Clone dotfile-repo
      become: yes
      ansible.builtin.git:
        repo: '{{ dotfile_repo }}'
        dest: '/home/{{ user }}/dotfiles'
        single_branch: yes
        version: master
        force: yes
      listen: "dotfiles"

    - name: set correct owner and mode of dotfiles
      become: yes
      ansible.builtin.file:
        path: '/home/{{ user }}/dotfiles'
        owner: '{{ user }}'
        group: '{{ group }}'
        mode: 'u=rwX,g=rX,o=rX'
        recurse: yes
      listen: "dotfiles"

    - name: set correct owner and mode of dotfiles-install
      become: yes
      ansible.builtin.file:
        path: '/home/{{ user }}/dotfiles/install.sh'
        mode: '0744'
      listen: "dotfiles"

    - name: set correct owner and mode of dotfiles-uninstall
      become: yes
      ansible.builtin.file:
        path: '/home/{{ user }}/dotfiles/uninstall.sh'
        mode: '0744'
      listen: "dotfiles"
    
    - name: "install .oh-my-zsh"
      become: yes
      become_user: '{{ user }}'
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      listen: "ohmyzsh"

    - name: execute dotfiles-install
      become: yes
      become_user: '{{ user }}'
      command: bash '/home/{{ user }}/dotfiles/install.sh'
      listen: "dotfiles"

    - name: Clone dotfile-repo root
      become: yes
      ansible.builtin.git:
        repo: '{{ dotfile_repo }}'
        dest: '/root/dotfiles'
        single_branch: yes
        version: master
        force: yes
      listen: "dotfilesroot"

    - name: "install .oh-my-zsh root"
      become: yes
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      listen: "ohmyzshroot"

    - name: execute dotfiles-install
      become: yes
      command: bash /root/dotfiles/install.sh
      listen: "dotfilesroot"

    - name: copy sshd_config
      become: yes
      copy:
        src: ../files/sshd_config
        dest: /etc/ssh
        owner: root
        group: root
        mode: 0644
      notify: restart sshd

    - name: copy visudo-file
      become: yes
      copy:
        src: ../files/99_wheel
        dest: /etc/sudoers.d
        owner: root
        group: root
        mode: 0644
      listen: "visudo"

